#version 450

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform vec2 u_BlurAmount;
layout(binding = 0) uniform sampler2D u_InTex;

layout(binding = 0) uniform writeonly image2D outImage;

void blur(in sampler2D tex, in vec2 blurAmount, in vec2 uv, out vec4 outColor)
{
	vec4 color = texture(tex, uv);
	if (blurAmount != vec2(0.)) {
		for (int x = 1; x <= blurAmount.x; x++) {
			for (int y = 1; y <= blurAmount.y; y++) {
				color += textureOffset(tex, uv, ivec2( x,  y));
				color += textureOffset(tex, uv, ivec2( x, -y));
				color += textureOffset(tex, uv, ivec2(-x,  y));
				color += textureOffset(tex, uv, ivec2(-x, -y));
			}
		}
		color /= blurAmount.x * blurAmount.y * 4.;
	}
	outColor = color;
}

void negative(in vec4 inColor, out vec4 outColor)
{
	outColor.a = inColor.a;
	outColor.rgb = 1. - inColor.rgb;
}

void sobel(in sampler2D tex, in vec2 uv, out vec4 outColor)
{
	float kernel[9] = float[](
		 0.,  1.,  0.,
		 1.,  0.,  1.,
		 0.,  1.,  0.
	);

	vec4 samples[9];
	int i = 0;
	for (int x = -1; x <= 1 ; x++) {
		for (int y = -1; y <= 1; y++) {
			samples[i++] = textureOffset(tex, uv, ivec2(x, y));
		}
	}

	vec4 color = vec4(0.);
	for (i = 0; i < 9; i++) {
		color += samples[i] * kernel[i];
	}

	outColor = vec4(color.rgb, 1.);
}

void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec4 outColor = vec4(0.83, 0.34, 0.64, 1.0);
	vec2 texCoord = vec2(gl_GlobalInvocationID.xy) / vec2(gl_NumWorkGroups.xy);
	outColor = texture(u_InTex, texCoord);

	//blur(u_InTex, u_BlurAmount, texCoord, outColor);
	
	imageStore(outImage, pixelCoord, outColor);
	memoryBarrierImage();
}